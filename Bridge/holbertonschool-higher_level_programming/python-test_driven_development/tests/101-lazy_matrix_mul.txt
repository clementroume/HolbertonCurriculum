# testing lazy_matrix_mul function

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
matrix([[ 7, 10],
        [15, 22]])

>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
matrix([[13, 16]])

>>> lazy_matrix_mul([[1, 2]], [[3], [4]])
matrix([[11]])

>>> lazy_matrix_mul([1, 2], [3, 4])
Traceback (most recent call last):
TypeError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([[1, 2], [3, 4]])
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

>>> lazy_matrix_mul()
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> lazy_matrix_mul([[1, 2]], [[3, 4]])
Traceback (most recent call last):
ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

>>> lazy_matrix_mul("blabla", [[3], [4]])
Traceback (most recent call last):
TypeError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([[3], [4]], "blabla")
Traceback (most recent call last):
TypeError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([[]], [[3], [4]])
Traceback (most recent call last):
ValueError: shapes (1,0) and (2,1) not aligned: 0 (dim 1) != 2 (dim 0)

>>> lazy_matrix_mul([[3], [4]], [[]])
matrix([], shape=(2, 0), dtype=float64)

>>> lazy_matrix_mul([[1, "a"]], [[3, 4], [5, 6]])
Traceback (most recent call last):
TypeError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2]], [[3, 4], ["o", 6]])
Traceback (most recent call last):
ValueError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2], [3, 4, 9]], [[1, 2], [3, 4]])
Traceback (most recent call last):
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 0], [3, 4]])
Traceback (most recent call last):
ValueError: setting an array element with a sequence.